# Signed URL Architecture Implementation

## Overview

Comprehensive overhaul of the Google Cloud Storage signed URL system for the emergency reporting platform, implementing on-demand URL generation, extended expiration times, and data filtering for improved performance and security.

## ⚠️ Warning Resolution: Upstream Image Response Failed

### The Problem

You may encounter these warnings in development:

```
⨯ upstream image response failed for https://storage.googleapis.com/... 400
[Error: "url" parameter is valid but upstream response is invalid]

Image optimization failed for: https://storage.googleapis.com/...
```

### Root Cause

- **Next.js Image Optimization** attempts to process Google Cloud Storage signed URLs
- **Signed URLs are designed for direct access**, not for Next.js optimization pipeline
- **URL expiration issues** when Next.js tries to cache/optimize images
- **Component-level optimization** still enabled despite global config

### The Complete Solution

We've disabled Next.js image optimization at multiple levels:

1. **Global Configuration:**

```javascript
// next.config.mjs
unoptimized: true, // Disable optimization for all environments
```

2. **Component Level:**

```jsx
// OptimizedImage component
<Image
  // ... other props
  unoptimized={true} // Explicitly disable optimization
/>
```

3. **Cleaned up unused imports** of Next.js Image component

### Why This Works

- **Direct Image Delivery**: Images load directly from GCS without processing
- **No Upstream Requests**: Next.js doesn't try to fetch and optimize signed URLs
- **Better Performance**: Eliminates failed optimization attempts
- **Maintains Functionality**: Images still display perfectly with our OptimizedImage component

## Key Changes Implemented

### 1. Extended URL Expiration (24 Hours)

- **Before**: 1-hour signed URL expiration causing image loading failures
- **After**: 24-hour (1440 minutes) signed URL expiration
- **Impact**: Images remain accessible for an entire day, reducing failed loads

**Files Modified:**

- `src/lib/storage.js`: Updated `generateSignedDownloadUrl` default parameter
- Updated all function calls to use the new default
- Updated documentation comments

### 2. On-Demand URL Generation

- **Before**: URLs generated at upload time and stored in database
- **After**: URLs generated when data is fetched from API endpoints
- **Impact**: Eliminates expired URL issues, ensures fresh URLs every time

**Implementation:**

- New `generateMediaUrls()` function in `storage.js`
- Generates signed URLs for arrays of media items
- Graceful error handling for individual file failures
- Automatic URL refresh on every API call

### 3. Next.js Configuration Updates

- **Before**: Image optimization enabled causing upstream response failures
- **After**: Disabled image optimization globally for all environments
- **Impact**: Eliminates warning messages and failed optimization attempts

**Files Modified:**

- `next.config.mjs`: Set `unoptimized: true` for all environments
- Removes the conditional check that only disabled optimization in production

### 4. API Endpoint Enhancements

#### Alerts API (`src/app/api/alerts/route.js`)

- Added 3-day data filtering for performance optimization
- Implemented on-demand URL generation for media files
- Added error handling for URL generation failures

#### Reports API (`src/app/api/reports/route.js`)

- Added 3-day data filtering for performance optimization
- Implemented on-demand URL generation for media files
- Added error handling for URL generation failures

### 5. Performance Optimizations

#### 3-Day Data Filtering

```javascript
// Alerts: Filter by issuedAt
const threeDaysAgo = new Date();
threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
query.issuedAt = { $gte: threeDaysAgo };

// Reports: Filter by createdAt
query.createdAt = { $gte: threeDaysAgo };
```

#### Efficient Media URL Generation

```javascript
const alertsWithUrls = await Promise.all(
  alerts.map(async (alert) => {
    if (alert.media && alert.media.length > 0) {
      alert.media = await generateMediaUrls(alert.media);
    }
    return alert;
  })
);
```

## Technical Benefits

### Security Improvements

- **Private Bucket Access**: All media files remain in private GCS bucket
- **Time-Limited Access**: URLs automatically expire after 24 hours
- **No Stored URLs**: No risk of serving expired URLs from database

### Performance Benefits

- **Reduced Database Load**: Only fetch recent data (3 days)
- **Faster Queries**: Smaller result sets improve response times
- **Parallel Processing**: URL generation happens concurrently

### Reliability Improvements

- **No Expired URLs**: Fresh URLs generated on every request
- **Graceful Degradation**: Individual URL failures don't break entire response
- **Error Logging**: Comprehensive error tracking for debugging

## Code Architecture

### Core Functions

#### `generateSignedDownloadUrl(fileName, expiresIn = 1440)`

- Generates individual signed URLs with 24-hour expiration
- Includes file existence validation
- Comprehensive error handling and logging

#### `generateMediaUrls(mediaItems, expiresIn = 1440)`

- Batch processes arrays of media items
- Parallel URL generation for performance
- Individual error handling per media item
- Preserves original metadata

### API Response Flow

```
1. Client requests reports/alerts
2. Database query with 3-day filter
3. Fetch data without URLs
4. Generate fresh signed URLs on-demand
5. Return enhanced data with valid URLs
```

## Testing Considerations

### Validation Points

- [ ] Images load properly after 1+ hours
- [ ] API response times remain acceptable
- [ ] Error handling works for missing files
- [ ] 3-day filtering returns appropriate data
- [ ] Console logs show URL generation success

### Edge Cases Handled

- Missing fileName in media objects
- GCS file not found errors
- Storage configuration issues
- Individual URL generation failures
- Empty media arrays

## Future Enhancements

### Potential Optimizations

1. **Caching Layer**: Implement Redis cache for frequently accessed URLs
2. **Lazy Loading**: Generate URLs only when media is actually viewed
3. **Background Jobs**: Pre-generate URLs for recently uploaded content
4. **CDN Integration**: Use CloudFlare or similar for better global performance

### Monitoring Considerations

1. **URL Generation Metrics**: Track success/failure rates
2. **Performance Monitoring**: API response time analysis
3. **Storage Costs**: Monitor GCS API usage and costs
4. **User Experience**: Track image load success rates

## Configuration Notes

### Environment Variables Required

```bash
GOOGLE_CLOUD_BUCKET_NAME=your-bucket-name
GOOGLE_APPLICATION_CREDENTIALS=path/to/service-account.json
```

### Storage Bucket Configuration

- **Access**: Private bucket (not public)
- **Authentication**: Service account with Storage Object Viewer role
- **CORS**: Configured for your domain if needed

## Summary

This implementation provides a robust, scalable solution for handling media files in the emergency reporting system. The combination of on-demand URL generation, extended expiration times, and data filtering creates a system that is both performant and reliable, while maintaining the security benefits of private storage.

The architecture eliminates the core issue of expired URLs while improving overall system performance through intelligent data filtering and efficient URL generation strategies.
